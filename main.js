!function(){"use strict";class e{constructor(e,t,s,n,r,o,i){let{name:a,link:l}=e;this._name=a,this._link=l,this.cardId=s,this._cardLikeStatus=n,this._cardSelector=t,this._handleImageClick=r,this._handleDelete=o,this._handleLike=i,this._cardElement=document.querySelector(t).content.querySelector(".element").cloneNode(!0),this._cardImage=this._cardElement.querySelector(".element__image"),this._cardName=this._cardElement.querySelector(".element__name"),this._cardLikeButton=this._cardElement.querySelector(".element__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".element__delete-card-button"),this._cardDeleteModal=document.getElementById("delete-card-modal")}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLike(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDelete(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._cardImage,this._cardName)}))}getId(){return this.cardId}removeCard(){this._cardElement.remove(),this._cardElement=null}toggleCardLikeButton(){this._cardLikeButton.classList.toggle("element__like-button_active")}checkIfLikeActive(){return!this._cardLikeButton.classList.contains("element__like-button_active")}returnCardElement(){return this._setEventListeners(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName.textContent=this._name,this._cardLikeStatus&&this._cardLikeButton.classList.add("element__like-button_active"),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputElements=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_hasValidInput(){return this._inputElements.some((e=>!e.validity.valid))}_setEventHandlers(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleSubmitButtonState()}))}))}toggleSubmitButtonState(){this._hasValidInput(this._inputElements)?(this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.setAttribute("disabled","")):(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.removeAttribute("disabled"))}resetValidation(){this.toggleSubmitButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventHandlers()}}const s={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},n=Array.from(document.querySelectorAll(s.formSelector));console.log("formElements: ",n);const r={};n.forEach((e=>{const n=new t(s,e);r[e.name]=n,n.enableValidation(e)}));class o{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._containerElement=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e,t){this._containerElement[t](e)}}document.querySelector(".elements__list");const i=document.querySelectorAll(".modal"),a=(Array.from(i),document.querySelector("#edit-modal"),document.querySelector("#add-card-modal"),document.querySelector("#open-card-modal")),l=(a.querySelector(".modal__image"),a.querySelector(".modal__image-title"),document.forms["edit-profile-form"]),c=l.querySelector("[name = userName]"),d=l.querySelector("[name = aboutMe]"),h=document.querySelector(".profile__button-edit"),u=document.querySelector(".profile__button-add"),_=(document.querySelector(".modal__save"),document.querySelector(".element__delete-card-button"),document.querySelector(".modal__delete-button"),document.querySelector(".profile__edit")),m=document.querySelector(".profile__profile-info");document.querySelector(".profile__profile-heading"),m.querySelector(".profile__subtitle");class p{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>this.close(this._popupElement))),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class E extends p{constructor(e,t){super(e),this._handleSubmit=t,this._formElement=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__save"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e=Array.from(this._popupElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{console.log("input: ",e),t[e.name]=e.value})),console.log("GET INPUT VALUES: ",t),t}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{this._handleSubmit(this._getInputValues(),this._formElement),e.preventDefault()})),super.setEventListeners()}}document.getElementById("header-image").src="4e8e0a1d604782a0dff8.svg";const g=new class extends p{constructor(e){super(e),this._modalImage=this._popupElement.querySelector(".modal__image"),this._modalImageTitle=this._popupElement.querySelector(".modal__image-title")}open(e,t){this._modalImage.src=t,this._modalImage.alt=e,this._modalImageTitle.textContent=e,super.open()}}("#open-card-modal");g.setEventListeners();const f=new E("#edit-modal",(function(e,t){console.log(e),f.renderLoading(!0),S.editProfile(e).then((s=>{L.setUserInfo(e),t.reset()})).then((e=>{f.close()})).catch(S.logError).finally((e=>{f.renderLoading(!1)}))})),v=new E("#add-card-modal",(function(e,t){v.renderLoading(!0),console.log(e);const s={name:e.title,link:e.link};S.createCard(s).then((t=>{console.log(t);const s=t._id;B(e,"prepend",s)})).then((e=>{v.close(),t.reset()})).catch(S.logError).finally((e=>{v.renderLoading(!1)}))})),b=new E("#avatar-change-modal",(function(e,t){b.renderLoading(!0),S.avatarChange(e).then((s=>{t.reset(),b.close(),L.setAvatar(e.avatarLink)})).catch(S.logError).finally((e=>{b.renderLoading(!1)}))})),y=new class extends p{constructor(e,t,s){super(e),this._handleConfirm=t,this._handleDeleteListener=s,this._submitButton=this._popupElement.querySelector(".modal__save"),this._submitButtonText=this._submitButton.textContent}setEventListeners(){this._submitButton.addEventListener("click",(()=>{this._handleDeleteListener(this._cardObject)})),super.setEventListeners()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}open(e){this._cardObject=e,super.open()}}("#delete-card-modal",I,(function(e){y.renderLoading(!0,"Deleting..."),S.deleteCard(e.getId()).then((t=>{y.close(),e.removeCard()})).catch(S.logError).finally((e=>{y.renderLoading(!1)}))})),L=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._aboutMeElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{userName:this._nameElement.textContent,userAbout:this._aboutMeElement.textContent}}setAvatar(e){this._avatarElement.src=e}setUserInfo(e){let{userName:t,aboutMe:s}=e;this._nameElement.textContent=t,this._aboutMeElement.textContent=s}}(".profile__profile-heading",".profile__subtitle",".profile__avatar"),S=new class{constructor(e){this._options=e,this._baseUrl=e.baseUrl,this._headers=e.headers}async _checkResponse(e){return e.ok?e.json():Promise.reject(`Error. Status: ${e.status}`)}logError(e){console.error(e)}async getUserInformation(){return fetch(`${this._baseUrl}users/me`,this._options).then(this._checkResponse)}async getInitialCards(){return console.warn("getInitialCards() ran"),fetch(`${this._baseUrl}cards`,{headers:this._headers}).then(this._checkResponse)}async editProfile(e){let{userName:t,aboutMe:s}=e;return console.warn("editProfile() ran"),fetch(`${this._baseUrl}users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}async createCard(e){let{name:t,link:s}=e;return console.warn("createCard() ran"),console.log("name",t),console.log("link",s),fetch(`${this._baseUrl}cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse).then((e=>(console.log("Fetch data:",e),e)))}async deleteCard(e){return console.warn("deleteCard() ran"),fetch(`${this._baseUrl}cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}async likeCard(e){return console.warn("likeCard() ran"),fetch(`${this._baseUrl}cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({_isLiked:!0})}).then(this._checkResponse)}async dislikeCard(e){return console.warn("dislikeCard() ran"),fetch(`${this._baseUrl}cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}async avatarChange(e){return console.warn("avatarChange() ran"),fetch(`${this._baseUrl}users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatarLink})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1/",headers:{authorization:"37d10eee-d0ba-4e04-840e-0ebf682b3c60","Content-Type":"application/json"}});let k;function C(e,t){g.open(t.textContent,e.src)}function I(e){y.open(e)}function q(e){console.log(e),e.checkIfLikeActive()?S.likeCard(e.cardId).then((t=>{e.toggleCardLikeButton()})).catch(S.logError):S.dislikeCard(e.cardId).then((t=>e.toggleCardLikeButton())).catch(S.logError)}function B(t){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append",n=arguments.length>2?arguments[2]:void 0;null==n&&(n=t._id);const r=new e({name:t.name||t.title,link:t.link},"#add-elements",n,t.isLiked,C,I,q);k.addItem(r.returnCardElement(),s)}console.log(r),S.getUserInformation().then((e=>{const t=e.name,s=e.about;L.setUserInfo({userName:t,aboutMe:s}),L.setAvatar(e.avatar)})).catch(S.logError),S.getInitialCards().then((e=>{k=new o({items:e,renderer:B},".elements__list"),k.renderItems()})).catch(S.logError),h.addEventListener("click",(()=>{const{userName:e,userAbout:t}=L.getUserInfo();c.value=e,d.value=t,f.open(),r.edit_profile_form.resetValidation()})),u.addEventListener("click",(()=>{r.add_card_form.toggleSubmitButtonState(),v.open()})),_.addEventListener("click",(()=>{r.avatar_change_form.toggleSubmitButtonState(),b.open()})),f.setEventListeners(),v.setEventListeners(),y.setEventListeners(),b.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,